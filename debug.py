import asyncio
import aiohttp
import logging
from datetime import datetime, timedelta
from config import RAWG_API_KEY
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from services.game_api import fetch_games
from services.game_db import GameDatabase

db = GameDatabase()
scheduler = AsyncIOScheduler()

BASE_URL = "https://api.rawg.io/api/games"

async def fetch_games_by_date(session, start_date, end_date, page=1):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –≤—ã—à–µ–¥—à–∏—Ö –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    params = {
        "key": RAWG_API_KEY,
        "dates": f"{start_date},{end_date}",
        "ordering": "-released",
        "page": page,
        "page_size": 20
    }

    async with session.get(BASE_URL, params=params) as response:
        if response.status != 200:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
            return None
        return await response.json()

async def update_games():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞—è –∏–≥—Ä—ã –±–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º)."""
    db = GameDatabase()
    async with aiohttp.ClientSession() as session:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã —Å 24 —Ñ–µ–≤—Ä–∞–ª—è 2025 –ø–æ 12 –º–∞—Ä—Ç–∞ 2025...")
        page = 1

        while True:
            data = await fetch_games_by_date(session, "2025-03-13", "2025-03-23", page)
            if not data or "results" not in data:
                break

            for game in data["results"]:
                platforms = game.get("platforms")

                if not platforms:
                    print(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ '{game['name']}' (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö)")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –±–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º

                db.insert_game(
                    title=game["name"],
                    release_date=game.get("released"),
                    metascore=game.get("metacritic"),
                    cover_url=game.get("background_image")
                )

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä—É –∫ –∂–∞–Ω—Ä–∞–º
                for genre in game.get("genres", []):
                    db.insert_genre(genre["name"])
                    db.link_game_genre(game["name"], genre["name"])

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä—É –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (—Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –µ—Å—Ç—å)
                for platform in platforms:
                    db.insert_platform(platform["platform"]["name"])
                    db.link_game_platform(game["name"], platform["platform"]["name"])

            if "next" not in data or not data["next"]:
                break  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º

            page += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        print("‚úÖ –ò–≥—Ä—ã –∑–∞ 2025 –≥–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(update_games())