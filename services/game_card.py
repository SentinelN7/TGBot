from aiogram import Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from services.database import connect_db, update_recommendations
from services.game_api import fetch_game_details

router = Router()

class ShowingGame(StatesGroup):
    waiting_for_rating = State()

async def show_game(message: Message, game_id: int, from_recommendations: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT 
                g.title, 
                TO_CHAR(g.release_date, 'DD.MM.YYYY') AS release_date, 
                COALESCE(string_agg(DISTINCT ge.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS genre,
                COALESCE(string_agg(DISTINCT pl.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS platforms,
                g.metascore, 
                g.cover_url
            FROM games g
            LEFT JOIN game_genres gg ON g.id = gg.game_id
            LEFT JOIN genres ge ON gg.genre_id = ge.id
            LEFT JOIN game_platforms gp ON g.id = gp.game_id
            LEFT JOIN platforms pl ON gp.platform_id = pl.id
            WHERE g.id = %s
            GROUP BY g.id;
        """, (game_id,))

        game = cursor.fetchone()
        conn.close()

        if not game:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        title, release_date, genre, platforms, rating, cover_url = game

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∏–∑–¥–∞—Ç–µ–ª—å, slug, –æ–ø–∏—Å–∞–Ω–∏–µ)
        details = await fetch_game_details(title)
        if not details:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        developer = details.get("developer", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        publisher = details.get("publisher", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        slug = details.get("slug")

        text = (f"<b>{title}</b>\n"
                f"üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {developer}\n"
                f"üè¢ –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {release_date}\n"
                f"üéÆ –ñ–∞–Ω—Ä: {genre}\n"
                f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating if rating else '–ù–µ—Ç'}\n\n"
                "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'.")

        keyboard_buttons = []
        if slug:
            keyboard_buttons.append([types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=f"https://rawg.io/games/{slug}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{game_id}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate_{game_id}")])

        if from_recommendations:
            keyboard_buttons.append([types.InlineKeyboardButton(text="–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"not_interested_{game_id}")])

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if cover_url:
            await message.answer_photo(photo=cover_url, caption=text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_game_info: {e}")  # –í—ã–≤–æ–¥ –≤ –ª–æ–≥
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ.")



@router.callback_query(lambda c: c.data.startswith("favorite_"))
async def add_to_favorites(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â—ë –Ω–µ—Ç."""
    game_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    conn = connect_db()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    cursor.execute("SELECT 1 FROM favorite_games WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s) AND game_id = %s", (user_id, game_id))
    already_favorited = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
    game_record = cursor.fetchone()
    game_title = game_record[0]

    if already_favorited:
        await callback.message.answer(f"‚ùå –ò–≥—Ä–∞ {game_title} —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        conn.close()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    cursor.execute("INSERT INTO favorite_games (user_id, game_id) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s)", (user_id, game_id))
    conn.commit()
    conn.close()

    await callback.message.answer(f"‚úÖ –ò–≥—Ä–∞ {game_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    update_recommendations(user_id)


@router.callback_query(lambda c: c.data.startswith("rate_"))
async def rate_game(callback: CallbackQuery, state: FSMContext):
    game_id = int(callback.data.split("_")[1])
    await state.update_data(game_id=game_id)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:")
    await state.set_state(ShowingGame.waiting_for_rating)


@router.message(ShowingGame.waiting_for_rating)
async def process_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 10:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    user_data = await state.get_data()
    game_id = user_data.get("game_id")
    user_id = message.from_user.id

    conn = connect_db()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    user_record = cursor.fetchone()

    if user_record:
        real_user_id = user_record[0]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
        game_record = cursor.fetchone()
        game_title = game_record[0]

        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
        cursor.execute("""
            INSERT INTO rated_games (user_id, game_id, rating) 
            VALUES (%s, %s, %s) 
            ON CONFLICT (user_id, game_id) 
            DO UPDATE SET rating = EXCLUDED.rating;
        """, (real_user_id, game_id, rating))

        conn.commit()
        conn.close()

        await message.answer(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –∏–≥—Ä—É {game_title} –Ω–∞ {rating}/10.")
        update_recommendations(user_id)
    else:
        conn.close()
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")

    await state.clear()

@router.callback_query(lambda c: c.data.startswith("not_interested_"))
async def mark_not_interested(callback: CallbackQuery):
    """–ü–æ–º–µ—á–∞–µ—Ç –∏–≥—Ä—É –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    game_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    conn = connect_db()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    cursor.execute(
        "SELECT 1 FROM not_interested_games WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s) AND game_id = %s",
        (user_id, game_id))
    already_favorited = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
    cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
    game_record = cursor.fetchone()
    game_title = game_record[0]

    if already_favorited:
        await callback.message.answer(f"‚ùå –ò–≥—Ä–∞ {game_title} —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è!")
        conn.close()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    cursor.execute(
        "INSERT INTO not_interested_games (user_id, game_id) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s)",
        (user_id, game_id))
    conn.commit()
    conn.close()

    await callback.message.answer(f"‚úÖ –ò–≥—Ä–∞ {game_title} –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è!")
    update_recommendations(user_id)

