import aiohttp
import requests
import logging
from io import BytesIO
from PIL import Image
from aiogram import Router, types, Bot
from aiogram.types import Message, BufferedInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from services.database import connect_db, update_recommendations
from services.game_api import fetch_game_details

router = Router()

class ShowingGame(StatesGroup):
    waiting_for_rating = State()


async def process_game_image(cover_url: str):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–±–ª–æ–∂–µ–∫ –∏–≥—Ä) """
    if not cover_url:
        return None

    try:
        response = requests.get(cover_url, timeout=10)
        if response.status_code == 200:
            image_data = response.content
            file_size = len(image_data)

            if file_size > 5 * 1024 * 1024:  # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ 5MB, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
                img = Image.open(BytesIO(image_data))
                img_format = img.format if img.format else "JPEG"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç

                # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä)
                output_buffer = BytesIO()
                img.thumbnail((1280, 720))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                img.save(output_buffer, format=img_format, quality=85)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Å–∂–∞—Ç–∏–µ–º
                image_data = output_buffer.getvalue()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return BufferedInputFile(image_data, filename="cover.jpg")

        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
            return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


async def show_game_message(message: Message, game_id: int, from_recommendations=False):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä –∏–∑ –ø–æ–∏—Å–∫–∞ –∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π) """
    user_id = message.from_user.id

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT 
                g.title, 
                TO_CHAR(g.release_date, 'DD.MM.YYYY') AS release_date, 
                COALESCE(string_agg(DISTINCT ge.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS genre,
                COALESCE(string_agg(DISTINCT pl.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS platforms,
                g.metascore, 
                g.cover_url
            FROM games g
            LEFT JOIN game_genres gg ON g.id = gg.game_id
            LEFT JOIN genres ge ON gg.genre_id = ge.id
            LEFT JOIN game_platforms gp ON g.id = gp.game_id
            LEFT JOIN platforms pl ON gp.platform_id = pl.id
            WHERE g.id = %s
            GROUP BY g.id;
        """, (game_id,))

        game = cursor.fetchone()
        conn.close()

        if not game:
            logging.warning(f"–ò–≥—Ä–∞ (ID {game_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        title, release_date, genre, platforms, rating, cover_url = game
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã: {title}")

        details = await fetch_game_details(title)
        if not details:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∏–≥—Ä—ã: {title}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        developer = details.get("developer", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        publisher = details.get("publisher", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        slug = details.get("slug")

        text = (f"<b>{title}</b>\n"
                f"üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {developer}\n"
                f"üè¢ –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {release_date}\n"
                f"üéÆ –ñ–∞–Ω—Ä: {genre}\n"
                f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating if rating else '–ù–µ—Ç'}\n\n"
                "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'.")

        keyboard_buttons = []
        if slug:
            keyboard_buttons.append([types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=f"https://rawg.io/games/{slug}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{game_id}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å", callback_data=f"rate_{game_id}")])

        if from_recommendations:
            keyboard_buttons.append([types.InlineKeyboardButton(text="–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"not_interested_{game_id}")])

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        image = await process_game_image(cover_url)
        if image:
            await message.answer_photo(photo=image, caption=text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_game_message —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ.")


async def show_game_bot(user_id: int, game_id: int, bot):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π) """
    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT 
                g.title, 
                TO_CHAR(g.release_date, 'DD.MM.YYYY') AS release_date, 
                COALESCE(string_agg(DISTINCT ge.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS genre,
                COALESCE(string_agg(DISTINCT pl.name, ', '), '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS platforms,
                g.metascore, 
                g.cover_url
            FROM games g
            LEFT JOIN game_genres gg ON g.id = gg.game_id
            LEFT JOIN genres ge ON gg.genre_id = ge.id
            LEFT JOIN game_platforms gp ON g.id = gp.game_id
            LEFT JOIN platforms pl ON gp.platform_id = pl.id
            WHERE g.id = %s
            GROUP BY g.id;
        """, (game_id,))

        game = cursor.fetchone()
        conn.close()

        if not game:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        title, release_date, genre, platforms, rating, cover_url = game

        details = await fetch_game_details(title)
        if not details:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            return

        developer = details.get("developer", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        publisher = details.get("publisher", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        slug = details.get("slug")

        text = (f"<b>{title}</b>\n"
                f"üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {developer}\n"
                f"üè¢ –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {release_date}\n"
                f"üéÆ –ñ–∞–Ω—Ä: {genre}\n"
                f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating if rating else '–ù–µ—Ç'}\n\n"
                "–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'.")

        keyboard_buttons = []
        if slug:
            keyboard_buttons.append([types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=f"https://rawg.io/games/{slug}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{game_id}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text="–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", callback_data=f"not_interested_{game_id}")])

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        image = await process_game_image(cover_url)
        if image:
            await bot.send_photo(user_id, photo=image, caption=text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_game_bot —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ.")


@router.callback_query(lambda c: c.data.startswith("favorite_"))
async def add_to_favorites(callback: CallbackQuery):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    game_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–≥—Ä—É (ID {game_id})")

    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT 1 FROM favorite_games WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s) AND game_id = %s", (user_id, game_id))
    already_favorited = cursor.fetchone()

    cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
    game_record = cursor.fetchone()
    game_title = game_record[0]

    if already_favorited:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —É–∂–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∏–≥—Ä—É: {game_title}")
        await callback.message.answer(f"‚ùå –ò–≥—Ä–∞ {game_title} —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        conn.close()
        return

    cursor.execute("INSERT INTO favorite_games (user_id, game_id) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s)", (user_id, game_id))
    conn.commit()
    conn.close()

    logging.info(f"–ò–≥—Ä–∞ {game_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    await callback.message.answer(f"‚úÖ –ò–≥—Ä–∞ {game_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    update_recommendations(user_id)


@router.callback_query(lambda c: c.data.startswith("rate_"))
async def rate_game(callback: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã """
    user_id = callback.from_user.id
    game_id = int(callback.data.split("_")[1])

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä—É (ID {game_id})")

    await state.update_data(game_id=game_id)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:")
    await state.set_state(ShowingGame.waiting_for_rating)


@router.message(ShowingGame.waiting_for_rating)
async def process_rating(message: Message, state: FSMContext):
    user_id = message.from_user.id
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã """
    try:
        rating = int(message.text)
        if rating < 1 or rating > 10:
            raise ValueError
    except ValueError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É: {message.text}")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    user_data = await state.get_data()
    game_id = user_data.get("game_id")
    
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    user_record = cursor.fetchone()

    if user_record:
        real_user_id = user_record[0]

        cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
        game_record = cursor.fetchone()
        game_title = game_record[0]

        cursor.execute("""
            INSERT INTO rated_games (user_id, game_id, rating) 
            VALUES (%s, %s, %s) 
            ON CONFLICT (user_id, game_id) 
            DO UPDATE SET rating = EXCLUDED.rating;
        """, (real_user_id, game_id, rating))

        conn.commit()
        conn.close()

        await message.answer(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –∏–≥—Ä—É {game_title} –Ω–∞ {rating}/10.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª –∏–≥—Ä—É {game_title} (ID {game_id}) –Ω–∞ {rating}/10")
        update_recommendations(user_id)
    else:
        conn.close()

    await state.clear()

@router.callback_query(lambda c: c.data.startswith("not_interested_"))
async def mark_not_interested(callback: CallbackQuery):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä—É –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    game_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—É (ID {game_id})")

    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute(
        "SELECT 1 FROM not_interested_games WHERE user_id = (SELECT id FROM users WHERE telegram_id = %s) AND game_id = %s",
        (user_id, game_id))
    already_not_interested = cursor.fetchone()

    cursor.execute("SELECT title FROM games WHERE id = %s", (game_id,))
    game_record = cursor.fetchone()
    game_title = game_record[0]

    if already_not_interested:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —É–∂–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∏–≥—Ä—É: {game_title}")
        await callback.message.answer(f"‚ùå –ò–≥—Ä–∞ {game_title} —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è!")
        conn.close()
        return

    cursor.execute(
        "INSERT INTO not_interested_games (user_id, game_id) VALUES ((SELECT id FROM users WHERE telegram_id = %s), %s)",
        (user_id, game_id))
    conn.commit()
    conn.close()

    logging.info(f"–ò–≥—Ä–∞ {game_title} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    await callback.message.answer(f"‚úÖ –ò–≥—Ä–∞ {game_title} –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å—Å—è!")
    update_recommendations(user_id)

