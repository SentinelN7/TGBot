import aiohttp
import asyncio
import logging
from config import RAWG_API_KEY
from services.game_db import GameDatabase  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à—É —Ä–∞–±–æ—Ç—É —Å –ë–î

# –°–ª–æ–≤–∞—Ä—å –ø–ª–∞—Ç—Ñ–æ—Ä–º (RAWG API ‚Üí –Ω–∞—à–∞ –ë–î)
PLATFORMS = {
    "PC": 4,
    "PS5": 187,
    "PS4": 18,
    "PS3": 16,
    "Nintendo Switch": 7,
    "XBOX 360": 14,
    "XBOX ONE": 1,
    "XBOX SERIES X/S": 186
}

BASE_URL = "https://api.rawg.io/api/games"

async def fetch_games(session, platform_id, page):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä —Å API RAWG."""
    params = {
        "key": RAWG_API_KEY,
        "platforms": platform_id,
        "page": page,
        "page_size": 20  # –ú–∞–∫—Å–∏–º—É–º 20 –∏–≥—Ä –∑–∞ —Ä–∞–∑
    }

    async with session.get(BASE_URL, params=params) as response:
        if response.status != 200:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
            return None
        return await response.json()

async def get_all_games():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—ã –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î."""
    db = GameDatabase()
    async with aiohttp.ClientSession() as session:
        for platform, platform_id in PLATFORMS.items():
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –¥–ª—è {platform}...")
            game_count = 0
            page = 1

            while game_count < 4500:
                data = await fetch_games(session, platform_id, page)
                if not data or "results" not in data:
                    break  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏—à–ª–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º

                for game in data["results"]:
                    db.insert_game(
                        title=game["name"],
                        release_date=game.get("released"),
                        metascore=game.get("metacritic"),
                        cover_url=game.get("background_image")
                    )

                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä—É –∫ –∂–∞–Ω—Ä–∞–º
                    for genre in game.get("genres", []):
                        db.insert_genre(genre["name"])
                        db.link_game_genre(game["name"], genre["name"])

                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä—É –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
                    db.insert_platform(platform)
                    db.link_game_platform(game["name"], platform)

                    game_count += 1
                    if game_count >= 4500:
                        break  # –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞

                page += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

async def fetch_game_details(title: str):
    """–ò—â–µ—Ç –∏–≥—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø–æ–ª—É—á–∞–µ—Ç –µ—ë ID –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    async with aiohttp.ClientSession() as session:
        # 1. –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        search_url = f"https://api.rawg.io/api/games?key={RAWG_API_KEY}&search={title}"
        async with session.get(search_url) as search_response:
            if search_response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã: {search_response.status}")
                return None
            search_data = await search_response.json()

            if not search_data.get("results"):
                logging.warning(f"–ò–≥—Ä–∞ '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None

            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            game_id = search_data["results"][0]["id"]

        # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ ID
        game_url = f"https://api.rawg.io/api/games/{game_id}?key={RAWG_API_KEY}"
        async with session.get(game_url) as response:
            if response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status}")
                return None
            data = await response.json()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç—É—Ç –Ω–µ—Ç "results", —ç—Ç–æ —É–∂–µ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç)
    return {
        "developer": data.get("developers", [{"name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}])[0]["name"],
        "publisher": data.get("publishers", [{"name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}])[0]["name"],
        "slug": data.get("slug"),
    }