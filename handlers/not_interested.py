from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.database import get_not_interested_games, remove_not_interested_game, update_recommendations, update_last_activity, update_user_state
from handlers.profile import ProfileState, show_profile
import logging

router = Router()

@router.callback_query(lambda c: c.data == "not_interested")
async def show_not_interested(callback: CallbackQuery, state: FSMContext):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä, –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ """
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä")

    update_last_activity(user_id)
    update_user_state(user_id, "Not interesting games")
    not_interested_games = get_not_interested_games(user_id)

    if not not_interested_games:
        text = "‚ùå *–í—ã –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –∏–≥—Ä—ã –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ*"
    else:
        text = format_not_interested_games(not_interested_games)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data="remove_not_interested_game")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ])

    message = await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await state.update_data(last_not_interested_message=message.message_id)


def format_not_interested_games(not_interested_games):
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é """
    sorted_games = sorted(not_interested_games, key=lambda x: x[1])
    text = "üö´ *–ù–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–≥—Ä—ã:*\n\n"

    for i, (_, game_name) in enumerate(sorted_games, start=1):
        text += f"{i}. {game_name}\n"

    return text


@router.callback_query(lambda c: c.data == "remove_not_interested_game")
async def ask_game_number(callback: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö """
    user_id = callback.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö")

    update_last_activity(user_id)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(ProfileState.waiting_for_not_interested_game_number)


@router.message(ProfileState.waiting_for_not_interested_game_number)
async def remove_game(message: Message, state: FSMContext):
    """ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö """
    user_id = message.from_user.id
    not_interested_games = get_not_interested_games(user_id)

    if not not_interested_games:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É, –Ω–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–≥—Ä.")
        await state.clear()
        return

    sorted_games = sorted(not_interested_games, key=lambda x: x[1])

    try:
        game_index = int(message.text) - 1
        if game_index < 0 or game_index >= len(sorted_games):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã: {message.text}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥: {message.text}")
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–æ–º–µ—Ä—É –∏–≥—Ä—ã.")
        return

    game_id, game_name = sorted_games[game_index]
    remove_not_interested_game(user_id, game_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö: {game_name} (ID {game_id})")

    data = await state.get_data()
    last_message_id = data.get("last_not_interested_message")

    if last_message_id:
        try:
            await message.chat.delete_message(last_message_id)
        except Exception:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message_id} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    await message.answer(f"‚úÖ *–ò–≥—Ä–∞ ¬´{game_name}¬ª —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö.*", parse_mode="Markdown")
    update_recommendations(user_id)
    await show_profile(message, state)


def register_handlers(dp):
    dp.include_router(router)
