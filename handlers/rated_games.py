from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from services.database import get_rated_games, update_game_rating, remove_game_rating
from handlers.profile import ProfileState, show_profile

router = Router()

@router.callback_query(lambda c: c.data == "rated_games")
async def show_rated_games(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    user_id = callback.from_user.id
    rated_games = get_rated_games(user_id)

    if not rated_games:
        text = "‚ùå *–í—ã –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ –∏–≥—Ä—ã*"
    else:
        text = format_rated_games(rated_games)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –£–¥–∞–ª–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="modify_rating")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back_to_profile")]
    ])

    message = await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await state.update_data(last_rated_message=message.message_id)


def format_rated_games(rated_games):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    sorted_games = sorted(rated_games, key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    text = "‚≠ê *–û—Ü–µ–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∏–≥—Ä—ã:*\n\n"

    for i, (_, game_name, rating) in enumerate(sorted_games, start=1):
        text += f"{i}. {game_name}: {rating}/10\n"

    return text


@router.callback_query(lambda c: c.data == "modify_rating")
async def ask_game_number(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"""
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã, –æ—Ü–µ–Ω–∫—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(ProfileState.waiting_for_rating_change)


@router.message(ProfileState.waiting_for_rating_change)
async def modify_rating(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã"""
    user_id = message.from_user.id
    rated_games = get_rated_games(user_id)

    if not rated_games:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä.")
        await state.clear()
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ format_rated_games
    sorted_games = sorted(rated_games, key=lambda x: x[1])

    try:
        game_index = int(message.text) - 1
        if game_index < 0 or game_index >= len(sorted_games):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–æ–º–µ—Ä—É –∏–≥—Ä—ã.")
        return

    game_id, game_name, _ = sorted_games[game_index]  # –¢–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–∏—Å–∫—É
    await state.update_data(selected_game_id=game_id, selected_game_name=game_name)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª (–æ—Ç 1 –¥–æ 10) –∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(ProfileState.waiting_for_new_rating)


@router.message(ProfileState.waiting_for_new_rating)
async def set_new_rating(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    data = await state.get_data()
    game_id = data.get("selected_game_id")
    game_name = data.get("selected_game_name")

    try:
        new_rating = int(message.text)
        if new_rating < 0 or new_rating > 10:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if new_rating == 0:
        remove_game_rating(user_id, game_id)
        action_text = "—É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä."
    else:
        update_game_rating(user_id, game_id, new_rating)
        action_text = f"–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_rating}/10."

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä
    last_message_id = data.get("last_rated_message")
    if last_message_id:
        try:
            await message.chat.delete_message(last_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    await message.answer(f"‚úÖ *–û—Ü–µ–Ω–∫–∞ –∏–≥—Ä—ã ¬´{game_name}¬ª {action_text}*", parse_mode="Markdown")
    await show_profile(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç


def register_handlers(dp):
    dp.include_router(router)
