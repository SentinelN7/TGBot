from aiogram import Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from services.database import connect_db, update_recommendations, update_last_activity, update_user_state
from services.game_api import fetch_game_details
from handlers.menu import show_menu
from services import game_card
import logging

router = Router()

class SearchGame(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_game_selection = State()

search_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


@router.message(lambda msg: msg.text == "üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã")
async def start_search(message: Message, state: FSMContext):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∏–≥—Ä """
    update_user_state(message.from_user.id, "Search")
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∏–≥—Ä—ã")
    intro_text = (
        "üîé *–í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä*\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –≤–∞–º –∏–≥—Ä—É –∏–∑ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä, "
        "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É, –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n\n"
        "üìå *–ü—Ä–∞–≤–∏–ª–∞:*\n"
        "1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º –∏–≥—Ä—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
        "2Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ *–∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ*, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞–µ–≤.\n"
        "3Ô∏è‚É£ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä MK, COD, CS –∏ —Ç.–¥.\n\n"
        "üîÑ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä—ã, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞—à–ª–∏ –∏—Å–∫–æ–º—É—é, –Ω–∞–∂–º–∏—Ç–µ *–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã* –≤ –º–µ–Ω—é.\n"
        "‚ùó –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∏–ª–∏ –µ—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –≤–∞–º –∏–≥—Ä—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n"
        "üéÆ *–£–¥–∞—á–∏!*"
    )

    await message.answer(intro_text, parse_mode="Markdown", reply_markup=search_keyboard)
    await start_new_search(message, state)

@router.message(lambda msg: msg.text == "üîÑ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
async def restart_search(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã """
    await start_new_search(message, state)

@router.message(lambda msg: msg.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_search_mode(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é """
    await state.clear()
    update_user_state(message.from_user.id, "Main Menu")
    await show_menu(message)

async def start_new_search(message: Message, state: FSMContext):
    """ –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ """
    update_last_activity(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchGame.waiting_for_search_query)

@router.message(SearchGame.waiting_for_search_query)
async def process_search(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∏–≥—Ä—ã """
    user_id = message.from_user.id
    search_query = message.text.strip().lower()

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –∏–≥—Ä—É: {search_query}")

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, title FROM games 
            WHERE LOWER(title) LIKE %s 
            LIMIT 50;
        """, (f"%{search_query}%",))

        games = cursor.fetchall()
        conn.close()

        if not games:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏–≥—Ä–∞ '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await message.answer("‚ùå –ò–≥—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        if len(games) == 1:
            game_id, game_title = games[0]
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—à—ë–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∏–≥—Ä—É: {game_title} (ID {game_id})")
            await game_card.show_game_message(message, game_id)
            await state.clear()
            return

        response = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
        game_options = {}
        for index, (game_id, game_title) in enumerate(games, start=1):
            response += f"{index}. {game_title}\n"
            game_options[str(index)] = game_id

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–∞ –≤—ã–±–æ—Ä ({len(games)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")

        await state.update_data(game_options=game_options)
        await message.answer(response + "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –∏–≥—Ä—ã.")
        await state.set_state(SearchGame.waiting_for_game_selection)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(SearchGame.waiting_for_game_selection)
async def select_game(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º """
    user_id = message.from_user.id
    update_last_activity(user_id)

    user_data = await state.get_data()
    game_options = user_data.get("game_options", {})

    if message.text not in game_options:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã: {message.text}")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    game_id = game_options[message.text]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É (ID {game_id})")

    await message.answer("–§–æ—Ä–º–∏—Ä—É—é –∫—Ä–∞—Å–æ—Ç—É –¥–ª—è —Ç–µ–±—è, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç–æ–∫...")
    await game_card.show_game_message(message, game_id)
    await state.clear()


def register_handlers(dp):
    dp.include_router(router)
    dp.include_router(game_card.router)
