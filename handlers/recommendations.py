import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from services.database import *
from handlers.menu import show_menu
from services.game_api import fetch_game_details
from services import game_card


router = Router()

class RecommendationState(StatesGroup):
    viewing = State()

def generate_recommendation_menu(user_settings):
    """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
    text = (
        "‚≠ê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!* ‚≠ê\n\n"
        "–ù–µ –∑–Ω–∞–µ—Ç–µ, –≤–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞—Ç—å? –ú—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—ã–¥–∞—á—É –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n"
        "üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"üéõ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ –∑–∞–ø—Ä–æ—Å–µ:* {user_settings['rec_count']}\n"
        f"üîî *–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:* {user_settings['notif_freq']}\n"
        f"üì© *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:* {user_settings['notif_count']}\n\n"
        "üìå *–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n"
        "üîπ –ù–∞–∂–º–∏—Ç–µ üé≤ *–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –∏–≥—Ä.\n"
        "üîπ –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–¥–∞—á–∏? –ñ–º–∏—Ç–µ ‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*.\n"
        "üîπ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üîô *–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", callback_data="recommendations_settings")],
        [InlineKeyboardButton(text="üé≤ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")],
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

    return text, keyboard

@router.message(lambda msg: msg.text == "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def recommendations_menu(message: Message, state: FSMContext):
    update_last_activity(message.from_user.id)
    update_user_state(message.from_user.id, "Recommendations")
    user_settings = get_user_profile(message.from_user.id)

    text, keyboard = generate_recommendation_menu(user_settings)

    temp1 = await message.answer("üîÑ –ü–æ–¥–≥–ª—è–¥—ã–≤–∞–µ–º –≤ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å–µ–∫—É–Ω–¥—É...",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[]], resize_keyboard=True))
    await asyncio.sleep(0.5)  # –î–∞—ë–º Telegram Web –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await temp1.delete()
    temp2 = await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ", reply_markup=ReplyKeyboardRemove())
    await temp2.delete()

    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(lambda msg: msg.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(event: CallbackQuery | Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()

    if isinstance(event, CallbackQuery):
        await event.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ CallbackQuery
        await show_menu(event.message)
    else:
        await show_menu(event)  # –ï—Å–ª–∏ —ç—Ç–æ Message, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é


def get_recommendations_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
            [KeyboardButton(text="üìå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

@router.callback_query(lambda c: c.data == "get_recommendations")
@router.message(RecommendationState.viewing, lambda msg: msg.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def show_recommendations(event: CallbackQuery | Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = event.from_user.id
    update_last_activity(user_id)
    recommended_games = get_recommendations(user_id)

    user_settings = get_user_profile(user_id)
    rec_count = user_settings.get("rec_count", 3)

    if len(recommended_games) < rec_count:
        update_recommendations(user_id)
        recommended_games = get_recommendations(user_id)

    if not recommended_games:
        message_text = "üòï –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        if isinstance(event, CallbackQuery):
            await event.message.answer(message_text)
        else:
            await event.answer(message_text)
        return

    game_ids = [game[0] for game in recommended_games]  # –°–ø–∏—Å–æ–∫ ID –∏–≥—Ä

    for game in recommended_games:
        game_id = game[0]
        message = event.message if isinstance(event, CallbackQuery) else event
        await game_card.show_game(message, game_id, from_recommendations=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    add_to_viewed_games(user_id, game_ids)
    remove_from_recommendations(user_id, game_ids)
    await state.set_state(RecommendationState.viewing)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã
    final_message = "üìå –í—ã–±—Ä–∞–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å?"
    if isinstance(event, CallbackQuery):
        await event.message.answer(final_message, reply_markup=get_recommendations_keyboard())
    else:
        await event.answer(final_message, reply_markup=get_recommendations_keyboard())


@router.message(RecommendationState.viewing, lambda msg: msg.text == "üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def refresh_recommendations(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    await show_recommendations(message, state)


OPTIONS = {
    "rec_count": [(str(i), f"{i} –∏–≥—Ä(–∞)") for i in range(1, 6)],
    "notif_count": [(str(i), f"{i} –∏–≥—Ä(–∞)") for i in range(1, 6)],
    "notif_freq": [("never", "–û—Ç–∫–ª—é—á–∏—Ç—å"), ("daily", "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"), ("3days", "–†–∞–∑ –≤ 3 –¥–Ω—è"), ("weekly", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ")]
}


def generate_settings_keyboard(user_settings):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""

    # –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î –≤ —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏
    TRANSLATE = {
        "never": "–û—Ç–∫–ª—é—á–∏—Ç—å",
        "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "3days": "–†–∞–∑ –≤ 3 –¥–Ω—è",
        "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
    }

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üéõ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {user_settings['rec_count']}", callback_data="edit_rec_count")],
        [InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {TRANSLATE.get(user_settings['notif_freq'], user_settings['notif_freq'])}",
            callback_data="edit_notif_freq")],
        [InlineKeyboardButton(text=f"üì© –ò–≥—Ä—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {user_settings['notif_count']}",
                              callback_data="edit_notif_count")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_recommendations")]
    ])


@router.callback_query(lambda c: c.data == "recommendations_settings")
async def show_settings_menu(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    user_settings = get_user_profile(callback.from_user.id)
    update_last_activity(callback.from_user.id)

    await callback.message.edit_text(
        "üîß *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*",
        reply_markup=generate_settings_keyboard(user_settings),
        parse_mode="Markdown"
    )

@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_setting(callback: CallbackQuery):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    param = callback.data.replace("edit_", "")

    if param not in OPTIONS:
        await callback.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ({param}).", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=label, callback_data=f"set_{param}_{value}")]
        for value, label in OPTIONS[param]
    ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="recommendations_settings")]])

    await callback.message.edit_text("üîß *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*", reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(lambda c: c.data.startswith("set_"))
async def update_setting(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_id = callback.from_user.id
    _, param_value = callback.data.split("_", maxsplit=1)  # –£–±–∏—Ä–∞–µ–º "set_"

    # –û—Ç–¥–µ–ª—è–µ–º param –æ—Ç value: param - –≤—Å—ë –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "_", value - –ø–æ—Å–ª–µ
    param, _, value = param_value.rpartition("_")

    print(f"–ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}, –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")

    if param in {"rec_count", "notif_count"}:
        try:
            value = int(value)
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", show_alert=True)
            return

    if param not in OPTIONS:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.", show_alert=True)
        return

    update_user_settings(user_id, **{param: value})
    await show_settings_menu(callback)


@router.message(lambda msg: msg.text == "üìå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
@router.callback_query(lambda c: c.data == "back_to_recommendations")
async def back_to_recommendations(event: CallbackQuery | Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    await state.clear()
    user_settings = get_user_profile(event.from_user.id)
    text, keyboard = generate_recommendation_menu(user_settings)

    if isinstance(event, CallbackQuery):
        await event.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", reply_markup=ReplyKeyboardRemove())
        await event.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await event.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", reply_markup=ReplyKeyboardRemove())
        await event.answer(text, reply_markup=keyboard, parse_mode="Markdown")



def register_handlers(dp):
    dp.include_router(router)

